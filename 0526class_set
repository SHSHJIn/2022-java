package set;

import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.Deque;
import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.Queue;

public class set {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Queue<Integer> queue = new PriorityQueue();
		
		queue.add(10);
		queue.add(20);
		queue.add(30);
		queue.add(40);
		queue.add(50);
		
		System.out.println("remove head: "+queue.peek()+", queue = "+queue);
		
		queue.remove();
		System.out.println("remove head: "+queue.peek()+", queue = "+queue);
		
		PriorityQueue<String> queue_str = new PriorityQueue<>();
		
		System.out.println("-----------------------------------------------");
		System.out.println("String PriorityQueue: ");
		
		queue_str.add("Tom");
		queue_str.add("Mike");
		queue_str.add("Jim");
		queue_str.add("Sam");
		
		System.out.println("head: "+queue_str.peek()+", queue_str = "+queue_str);
		
		queue_str.remove();
		System.out.println("head: "+queue_str.peek()+", queue_str = "+queue_str);
		
		///comparator
		System.out.println("-----------------------------------------------");
		System.out.println("Comparator: ");
		
		Comparator<String> stringLengthComparator = new Comparator<String>(){
			@Override
			
			public int compare(String s1, String s2)
			{
				return s1.length() - s2.length();
			}
		};
		//글자의 길이가 더 짧은것이 먼저오도록 하는거
		
		PriorityQueue <String> namePriorityQueue = new PriorityQueue<>(stringLengthComparator);
		
		namePriorityQueue.add("Lisa");
		namePriorityQueue.add("Robert");
		namePriorityQueue.add("John");
		namePriorityQueue.add("Chris");
		namePriorityQueue.add("Angelina");
		namePriorityQueue.add("Joe");
		
		System.out.println("head: "+namePriorityQueue.peek()+", queue_str = "+namePriorityQueue);
		//sort using the length of letter
		
		namePriorityQueue.remove();
		System.out.println("head: "+namePriorityQueue.peek()+", queue_str = "+namePriorityQueue);
		
		///Dequeue
		System.out.println("-----------------------------------------------");
		System.out.println("Dequeue: ");
		//자료를 지우고 추가할 수 있다
		
		Deque<String> myDeque = new ArrayDeque();
		
		myDeque.add("hello");
		myDeque.add("my");
		myDeque.add("dear");
		myDeque.add("friend");
		
		System.out.println("Deque = "+myDeque);
		
		myDeque.addFirst("message:");
		System.out.println("Deque = "+myDeque);
		
		myDeque.addLast("whats up?");
		System.out.println("Deque = "+myDeque);
		
		myDeque.removeFirst();
		System.out.println("deque = "+myDeque);
		
		myDeque.removeLast();
		System.out.println("deque = "+myDeque);
		
		
		
		System.out.println("-----------------------------------------------");
		System.out.println("Iterator for deque: from head");
		
		Iterator itr_deque = myDeque.iterator();
		//자료를 처음부터 하나씩 자른다
		
		while(itr_deque.hasNext())
		{
			System.out.println(itr_deque.next());
		}
		
		System.out.println();
		System.out.println("Iterator for deque: from tail");
		
		Iterator itr_deque_fromTail = myDeque.descendingIterator();
		//자료를 뒤에서부터 하나씩 자른다
		
		while(itr_deque_fromTail.hasNext())
		{
			System.out.println(itr_deque_fromTail.next());
		}
		
	}

}



///////////////////////////////////////////////////////////////////
package settt;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;

public class settt {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		System.out.println("--------------------------------");
		System.out.println("----------set practice----------");
	
		Set <Integer> set_1 = new HashSet<Integer>();
		//크기가 작은거부터 큰거까지 순서대로 정렬한다
		
		set_1.add(5);
		set_1.add(6);
		set_1.add(8);
		set_1.add(1);
		set_1.add(0);
		set_1.add(8);
		set_1.add(1);
		
		System.out.println("HashSet: Set_1 = " + set_1);
		
		
		System.out.println();
		System.out.println("LinkedHashSet (example) ");
		
		Set <Integer> set_2 = new LinkedHashSet<Integer>();
		//순서대로 정렬하지 않고 넣어준 값 그대로 출력된다
		//같은 값은 다시 출력되지 않음
		
		set_2.add(5);
		set_2.add(6);
		set_2.add(8);
		set_2.add(1);
		set_2.add(0);
		set_2.add(8);
		set_2.add(1);
		
		System.out.println("HashSet: Set_2 = " + set_2);
	
		System.out.println();
		System.out.println("---------------------------------------------------");
		System.out.println("----------union, intersection, difference----------");
		
		Set<Integer> a = new HashSet<Integer>();
		a.addAll(Arrays.asList(new Integer[] {1,3,2,4,8,9,0}));
	
		Set<Integer> b = new HashSet<Integer>();
		b.addAll(Arrays.asList(new Integer[] {1,3,7,5,4,0,7,5}));
		
		System.out.println("a = " + a);
		System.out.println("b = " + b);
		
		Set<Integer> union = new HashSet<Integer>();
		
		union.addAll(a);
		union.addAll(b);
		
		System.out.println("Union:" + union);
		
		Set<Integer> intersection = new HashSet<Integer>(a);
		
		intersection.retainAll(b);
		System.out.println("intersection:" + intersection);
		
		Set<Integer> Difference1 = new HashSet<Integer>(b);
		Difference1.removeAll(a);
		
		Set<Integer> Difference2 = new HashSet<Integer>(a);
		Difference2.removeAll(b);
		
		Set<Integer> Difference = new HashSet<Integer>(Difference1);
		Difference.addAll(Difference2);
		
		System.out.println("Difference: " + Difference);
		
		
		
	}

}
