import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.Deque;
import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.Queue;

public class PriorityQueue_Dequeue {

	public static void main(String[] args) {
		
		Queue<Integer> queue = new PriorityQueue<>();
		
		queue.add(30);
		System.out.println("1) add '30' head: " + queue.peek() + ", queue =" + queue);
		queue.add(40);
		System.out.println("2) add '40' head: " + queue.peek() + ", queue =" + queue);
		queue.add(15);
		System.out.println("3) add '15' head: " + queue.peek() + ", queue =" + queue);
		queue.add(60);
		System.out.println("4) add '60' head: " + queue.peek() + ", queue =" + queue);
		queue.add(20);
		System.out.println("5) add '20' head: " + queue.peek() + ", queue =" + queue);
		queue.add(17);
		System.out.println("6) add '17' head: " + queue.peek() + ", queue =" + queue);
		
		queue.remove();
		
		System.out.println("head: " +queue.peek() + ", queue = " +queue);
		
		System.out.println("----------------------");
		System.out.println("String PriorityQueue: ");
		PriorityQueue <String> queue_str = new PriorityQueue<>();
		
		queue_str.add("Tom");
		queue_str.add("Mike");
		queue_str.add("Jim");
		queue_str.add("Sam");
		
		System.out.println("head: " +queue_str.peek() + ", queue_str = " +queue_str);
		
		queue_str.remove();
		
		System.out.println("head: " +queue_str.peek() + ", queue_str = " +queue_str);
		
		/// Comparator
		
		System.out.println("----------------------");
		System.out.println("Comparator:");

		Comparator<String> stringLengthComparator = new Comparator<String>(){		
			@Override
			public int compare(String s1,String s2)
			{
				return s1.length()-s2.length();
			}
			
	    };
		
		PriorityQueue <String> namePriorityQueue = new PriorityQueue<>(stringLengthComparator);
		
		namePriorityQueue.add("Lisa");
		namePriorityQueue.add("Robert");
		namePriorityQueue.add("John");
		namePriorityQueue.add("Chris");
		namePriorityQueue.add("Angelia");
		namePriorityQueue.add("Joe");
		
		System.out.println("head: " +namePriorityQueue.peek() + ", namePriorityQueue = " +namePriorityQueue);
		System.out.println("Remove head:");
		namePriorityQueue.remove();
		System.out.println("head: " +namePriorityQueue.peek() + ", namePriorityQueue = " +namePriorityQueue);
		
		System.out.println("Remove head:");
		namePriorityQueue.remove();
		System.out.println("head: " +namePriorityQueue.peek() + ", namePriorityQueue = " +namePriorityQueue);
		
		System.out.println("-----------------");
		System.out.println("Dequeue:");
		
		Deque<String> myDeque = new ArrayDeque();
		myDeque.add("Hello");
		myDeque.add("my");
		myDeque.add("dear");
		myDeque.add("friend");
		System.out.println("deque =" + myDeque);
		
		myDeque.addFirst("message:");
		System.out.println("deque =" + myDeque);
		
		myDeque.addLast("whatsup?");
		System.out.println("deque =" + myDeque);
		
		myDeque.removeFirst();
		System.out.println("deque =" + myDeque);
		
		myDeque.removeLast();
		System.out.println("deque =" + myDeque);
		
		System.out.println("-----------------------------");
		System.out.println("Iterator for duque: from head");
		
		Iterator itr_duque = myDeque.iterator();
		
		while(itr_duque.hasNext()) {
			System.out.println(itr_duque.next());
		}
		System.out.println("-----------------------------");
		System.out.println("Iterator for duque: from tail");
		
		Iterator itr_deque_fromTail = myDeque.descendingIterator();
		
		while(itr_deque_fromTail.hasNext()) {
			System.out.println(itr_deque_fromTail.next());
		}
	}

}
